// Generated by CoffeeScript 1.6.3
(function() {
  var SockReconnect, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  SockReconnect = (function() {
    SockReconnect.prototype.reconnect = {
      reconnecting: false,
      do_not_reconnect: false,
      reload_after_n: true,
      max_retries: 30,
      reset_mult: 6,
      retry_timeout_ms: 1500 + Math.floor(Math.random() * 60),
      retry_multiplier: 2,
      retry_curr_multiplier: 0,
      retry_curr_timeout: 0,
      retry_count: 0
    };

    SockReconnect.prototype.conn = null;

    SockReconnect.prototype.eventHandlers = {
      'reconnect': [],
      'connect': [],
      'open': [],
      'close': [],
      'message': []
    };

    function SockReconnect(cli_path, options, onmessage, onopen, onclose) {
      this.cli_path = cli_path;
      this.onmessage = onmessage;
      this.onopen = onopen;
      this.onclose = onclose;
      this.on_message = __bind(this.on_message, this);
      this.on_close = __bind(this.on_close, this);
      this.on_open = __bind(this.on_open, this);
      this.send = __bind(this.send, this);
      this.reconnect_try = __bind(this.reconnect_try, this);
      this.reconnect_reset = __bind(this.reconnect_reset, this);
      this.connect = __bind(this.connect, this);
      this.update_status = __bind(this.update_status, this);
      this.on = __bind(this.on, this);
      $.extend(this.reconnect, options);
    }

    SockReconnect.prototype.on = function(event, handler) {
      var events, handlers, _i, _len;
      events = event.trim().split(/\s+/);
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        handlers = this.eventHandlers[event];
        handlers.push(handler);
      }
      return this;
    };

    SockReconnect.prototype.update_status = function() {
      var handler, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results, _results1, _results2;
      if (this.reconnect.reconnecting) {
        _ref = this.eventHandlers['reconnect'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          _results.push(handler());
        }
        return _results;
      } else if (this.conn === null || this.conn.readyState !== SockJS.OPEN) {
        _ref1 = this.eventHandlers['close'];
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          handler = _ref1[_j];
          _results1.push(handler());
        }
        return _results1;
      } else {
        _ref2 = this.eventHandlers['open'];
        _results2 = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          handler = _ref2[_k];
          _results2.push(handler());
        }
        return _results2;
      }
    };

    SockReconnect.prototype.connect = function() {
      var handler, _i, _len, _ref;
      if (this.conn != null) {
        this.conn.close();
        this.conn = null;
      }
      this.conn = new SockJS(this.cli_path);
      _ref = this.eventHandlers['connect'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        handler();
      }
      this.conn.onopen = this.on_open;
      this.conn.onclose = this.on_close;
      return this.conn.onmessage = this.on_message;
    };

    SockReconnect.prototype.reconnect_reset = function() {
      this.reconnect.reconnecting = false;
      this.reconnect.retry_curr_timeout = 0;
      this.reconnect.retry_curr_multipler = 0;
      return this.reconnect.retry_count = 0;
    };

    SockReconnect.prototype.reconnect_try = function(connfunc) {
      var callback,
        _this = this;
      if (this.reconnect.retry_count === this.reconnect.max_retries) {
        this.reconnect.reconnecting = false;
        if (this.reconnect.reload_after_n) {
          window.location.reload(true);
        }
        return;
      }
      if (!this.reconnect.reconnecting) {
        this.reconnect.reconnecting = true;
        this.reconnect.retry_curr_timeout = this.reconnect.retry_timeout_ms;
        this.reconnect.retry_curr_multipler = 1;
        this.reconnect.retry_count = 1;
        return connfunc();
      } else {
        this.reconnect.retry_count += 1;
        callback = function() {
          _this.reconnect.retry_curr_timeout *= _this.reconnect.retry_multiplier;
          _this.reconnect.retry_curr_multipler += 1;
          if (_this.reconnect.retry_curr_multipler === _this.reconnect.reset_mult) {
            _this.reconnect.retry_curr_timeout = _this.reconnect.retry_timeout_ms;
            _this.reconnect.retry_curr_multipler = 1;
          }
          return connfunc();
        };
        return setTimeout(callback, this.reconnect.retry_curr_timeout);
      }
    };

    SockReconnect.prototype.send = function(data) {
      return this.conn.send(data);
    };

    SockReconnect.prototype.on_open = function() {
      this.reconnect_reset();
      this.update_status();
      return typeof this.onopen === "function" ? this.onopen() : void 0;
    };

    SockReconnect.prototype.on_close = function() {
      this.conn = null;
      this.update_status();
      if (typeof this.onclose === "function") {
        this.onclose();
      }
      if (this.reconnect.do_not_reconnect) {
        return;
      }
      return this.reconnect_try(this.connect);
    };

    SockReconnect.prototype.on_message = function() {
      var args, handler, _i, _len, _ref, _ref1, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ((_ref = this.onmessage) != null) {
        _ref.apply(args);
      }
      _ref1 = this.eventHandlers['message'];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        handler = _ref1[_i];
        _results.push(handler.apply(this.conn, args));
      }
      return _results;
    };

    return SockReconnect;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.SockReconnect = SockReconnect;

}).call(this);
